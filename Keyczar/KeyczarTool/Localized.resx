<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddKey" xml:space="preserve">
    <value>Add a new key to an existing key set.</value>
    <comment>command description</comment>
  </data>
  <data name="Asymmetric" xml:space="preserve">
    <value>Use asymmetric algorithm (dsa|rsa).</value>
    <comment>flag description</comment>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create a new key set.</value>
    <comment>success message</comment>
  </data>
  <data name="Crypter" xml:space="preserve">
    <value>The location of the crypter key set to crypt the main key set.</value>
    <comment>crypter flag description</comment>
  </data>
  <data name="Demote" xml:space="preserve">
    <value>Demote a given key version from the key set.</value>
    <comment>demote command description</comment>
  </data>
  <data name="Destination" xml:space="preserve">
    <value>The destination location of the operation.</value>
    <comment>destination flag description</comment>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Exports primary private key to a PKCS Pem file.</value>
    <comment>export command description</comment>
  </data>
  <data name="ImportKey" xml:space="preserve">
    <value>Imports a key into to an existing key set.</value>
    <comment>importkey command description</comment>
  </data>
  <data name="ImportLocation" xml:space="preserve">
    <value>The location of the import file.</value>
    <comment>importlocation flag description</comment>
  </data>
  <data name="ImportPassword" xml:space="preserve">
    <value>Password for decrypting the imported key.</value>
    <comment>ImportPoassword flag description</comment>
  </data>
  <data name="Location" xml:space="preserve">
    <value>The location of the key set.</value>
    <comment>Location flag description</comment>
  </data>
  <data name="MsgCouldNotWrite" xml:space="preserve">
    <value>Could not write to:</value>
    <comment>error message ,postpended location</comment>
  </data>
  <data name="MsgCreatedKey" xml:space="preserve">
    <value>Created new key version:</value>
    <comment>success message ,postpended version</comment>
  </data>
  <data name="MsgCreatedKeySet" xml:space="preserve">
    <value>Created Key set. </value>
    <comment>success message</comment>
  </data>
  <data name="MsgDemotedVersion" xml:space="preserve">
    <value>Demoted Version {0} to {1}.</value>
    <comment>success message , 0=version, 1= status</comment>
  </data>
  <data name="MsgExistingKeySet" xml:space="preserve">
    <value>Could not overwrite key set at:</value>
    <comment>error message, postpended location</comment>
  </data>
  <data name="MsgExportedPem" xml:space="preserve">
    <value>Exported to pem.</value>
    <comment>success message</comment>
  </data>
  <data name="MsgInvalidStatus" xml:space="preserve">
    <value>Invalid status:</value>
    <comment>error message w/ postpended status</comment>
  </data>
  <data name="MsgUnknownVersion" xml:space="preserve">
    <value>Unknown Version:</value>
    <comment>postpended version</comment>
  </data>
  <data name="Name" xml:space="preserve">
    <value>The key set name.</value>
    <comment>Name flag description</comment>
  </data>
  <data name="Padding" xml:space="preserve">
    <value>RSA Padding (oaep|pkcs).</value>
    <comment>Padding flag description</comment>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password for crypting the key set or crypter key set.</value>
    <comment>Password flag description</comment>
  </data>
  <data name="Purpose" xml:space="preserve">
    <value>The purpose of the key set (sign|crypt).</value>
    <comment>Purpose flag description</comment>
  </data>
  <data name="Size" xml:space="preserve">
    <value>The key size in bits.</value>
    <comment>Size flag description</comment>
  </data>
  <data name="Status" xml:space="preserve">
    <value>The status (active|primary).</value>
    <comment>Status flag description</comment>
  </data>
  <data name="UnofficialCreate" xml:space="preserve">
    <value>Use unofficial key type (aes_aead).</value>
    <comment>Unoffical flag on create screen description</comment>
  </data>
  <data name="Version" xml:space="preserve">
    <value>The key version.</value>
    <comment>Version Flag description</comment>
  </data>
  <data name="MsgForKeySet" xml:space="preserve">
    <value>For your key set,</value>
    <comment>msg to describe password input type</comment>
  </data>
  <data name="MsgForImport" xml:space="preserve">
    <value>For your import file,</value>
    <comment>msg to describe password input type</comment>
  </data>
  <data name="MsgUnparsableImport" xml:space="preserve">
    <value>Unparsable import file.</value>
    <comment>error message</comment>
  </data>
  <data name="MsgConflictingKeyTypes" xml:space="preserve">
    <value>Conflicting key types, {0} != {1}.</value>
    <comment>error message, takes key types as parameters</comment>
  </data>
  <data name="MsgImportedNewKey" xml:space="preserve">
    <value>Imported new key version:</value>
    <comment>success message</comment>
  </data>
  <data name="MsgNewPublicKeySet" xml:space="preserve">
    <value>Created new public keyset</value>
    <comment>success message</comment>
  </data>
  <data name="Promote" xml:space="preserve">
    <value>Promote a given key version from the key set.</value>
    <comment>Promote command description</comment>
  </data>
  <data name="PubKey" xml:space="preserve">
    <value>Extracts public keys to a new key set.</value>
    <comment>PubKey command description</comment>
  </data>
  <data name="MsgPromotedVersion" xml:space="preserve">
    <value>Promoted Version {0} to {1}.</value>
    <comment>Msg of successful promted version. 0=version, 1=status</comment>
  </data>
  <data name="Revoke" xml:space="preserve">
    <value>Revoke a given key version from the key set.</value>
    <comment>Revoke command description</comment>
  </data>
  <data name="MsgRevokedVersion" xml:space="preserve">
    <value>Revoked Version.</value>
    <comment>success message</comment>
  </data>
  <data name="MsgCouldNotRevoke" xml:space="preserve">
    <value>Could not revoke Version:</value>
    <comment>error message</comment>
  </data>
  <data name="MsgUnknownCompression" xml:space="preserve">
    <value>Unknown Compression:</value>
    <comment>error message</comment>
  </data>
  <data name="UseKey" xml:space="preserve">
    <value>Uses keyset to encrypt or sign a message.</value>
    <comment>commanddescription</comment>
  </data>
  <data name="Binary" xml:space="preserve">
    <value>Use raw binary output.</value>
    <comment>Binary flag description</comment>
  </data>
  <data name="Compression" xml:space="preserve">
    <value>Use Compression (zlib|gzip).</value>
    <comment>Compression Flag</comment>
  </data>
  <data name="File" xml:space="preserve">
    <value>The message is a file location.</value>
    <comment>File flag description</comment>
  </data>
  <data name="Message" xml:space="preserve">
    <value>The message (uses std in if not set).</value>
    <comment>Message Flag description</comment>
  </data>
  <data name="MsgPleaseEnterPassword" xml:space="preserve">
    <value>Please enter password:</value>
    <comment>Prompt for password</comment>
  </data>
  <data name="MsgPleaseReenterPassword" xml:space="preserve">
    <value>Please re-enter password:</value>
    <comment>password prompt</comment>
  </data>
  <data name="MsgPasswordDidNotMatch" xml:space="preserve">
    <value>Password didn't match.</value>
    <comment>Error message</comment>
  </data>
  <data name="MsgPasswordGiveUp" xml:space="preserve">
    <value>Giving up.</value>
    <comment>error message</comment>
  </data>
  <data name="MsgMessageFlagWithPassword" xml:space="preserve">
    <value>'message' param required with password flag.</value>
    <comment>error message</comment>
  </data>
  <data name="MsgForExport" xml:space="preserve">
    <value>For your export file,</value>
    <comment>msg to describe password input type</comment>
  </data>
  <data name="PasswordCommand" xml:space="preserve">
    <value>Adds, changes, or removes password from PBE keyset.</value>
    <comment>Password command description</comment>
  </data>
  <data name="MsgRemovedPassword" xml:space="preserve">
    <value>Removed the password from the keyset.</value>
    <comment>Success message</comment>
  </data>
  <data name="PasswordPromptOldPassword" xml:space="preserve">
    <value>--Old Password--</value>
    <comment>Prompt as Old before password</comment>
  </data>
  <data name="PasswordPromptNewPassword" xml:space="preserve">
    <value>--New Password--</value>
    <comment>Prompt before new password prompt</comment>
  </data>
  <data name="MsgAddedPasssword" xml:space="preserve">
    <value>Added Password to PBE Keyset.</value>
    <comment>sucess message</comment>
  </data>
  <data name="MsgChangedPassword" xml:space="preserve">
    <value>Changed Password for PBE Keyset.</value>
    <comment>success message</comment>
  </data>
  <data name="Crypter2" xml:space="preserve">
    <value>The location of the crypter key set to crypt the 2nd key set.</value>
  </data>
  <data name="Destination2" xml:space="preserve">
    <value>The second destination location of the operation.</value>
  </data>
  <data name="Format" xml:space="preserve">
    <value>Output usage for key (crypt|sign|sign-timeout|sign-vanilla|sign-attached|crypt-session|crypt-signedsession).</value>
  </data>
  <data name="Location2" xml:space="preserve">
    <value>The locatione of the 2nd key set.</value>
  </data>
  <data name="Password2" xml:space="preserve">
    <value>Password for crypting the 2nd key set or 2nd crypter key set.</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove password from keyset.</value>
    <comment>Remove Flag description</comment>
  </data>
  <data name="MsgMessageFlagSession" xml:space="preserve">
    <value>If format is crypt-session or crypt-signedsession 'message' required.</value>
  </data>
  <data name="MsgRequiresDestination2" xml:space="preserve">
    <value>crypt-session or crypt-signedsession requires destination2.</value>
  </data>
  <data name="MsgRequiresLocation2" xml:space="preserve">
    <value>crypt-signedsession requires location2.</value>
  </data>
  <data name="MsgUnknownFormat" xml:space="preserve">
    <value>Unknown Format: {0}</value>
  </data>
  <data name="KeyType" xml:space="preserve">
    <value>The override for the default type of key (use keytypes to list keytypes).</value>
  </data>
  <data name="MsgInvalidType" xml:space="preserve">
    <value>Specified invalid type: {0}.</value>
  </data>
  <data name="MsgMismatchedKind" xml:space="preserve">
    <value>Kind of key, {0}, does not match key set kind, {1}.</value>
  </data>
  <data name="MsgMismatchedType" xml:space="preserve">
    <value>Type of key, {0}, does not match key set type of key, {1}. If you want to switch to the unofficial keyset format that allows for this, use --force.</value>
  </data>
  <data name="KeyTypes_Run_Encrypt_and_Decrypt_" xml:space="preserve">
    <value>Encrypt and Decrypt:</value>
  </data>
  <data name="KeyTypes_Run___Symmetric_" xml:space="preserve">
    <value>  Symmetric:</value>
  </data>
  <data name="KeyTypes" xml:space="preserve">
    <value>List available key types.</value>
    <comment>command description</comment>
  </data>
  <data name="KeyTypes_Unofficial" xml:space="preserve">
    <value>Also list available unofficial key types.</value>
    <comment>unofficial flag description on KeyTypes command</comment>
  </data>
  <data name="KeyTypes_Run___Asymmetric_" xml:space="preserve">
    <value>  Asymmetric:</value>
  </data>
  <data name="KeyTypes_Run____denotes_default_" xml:space="preserve">
    <value> * denotes default.</value>
  </data>
  <data name="KeyTypes_Run_Sign_and_Verify_" xml:space="preserve">
    <value>Sign and Verify:</value>
  </data>
  <data name="Pksc12Flag" xml:space="preserve">
    <value> Export all asymmetric keys in pksc12 format. </value>
  </data>
</root>